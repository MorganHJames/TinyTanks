//\===========================================================================================
//\ File: MathUtil.h
//\ Author: Morgan James
//\ Date Created: 21/02/2017
//\ Brief: Contains the MathUtil class declarations.
//\===========================================================================================

#ifndef _MATHUTIL_H_
#define _MATHUTIL_H_

//\===========================================================================================
//\ Author: Morgan James
//\ Brief: Multiple #defines for constants E.G. PI, 2PI, HALF_PI.
//\ Functions to test for collisions E.G.RayPointIntersection testing, AABB testing,
//\ Functions for Min / Max value, Clamp, Lerp, Slerp, SmoothStep etc.
//\===========================================================================================

//\===========================================================================================
//\ Definitions for constants
//\===========================================================================================

/* Definitions of useful mathematical constants
* E        - e
* LOG2E    - log2(e)
* LOG10E   - log10(e)
* LN2      - ln(2)
* LN10     - ln(10)
* PI       - pi
* PI_2     - pi/2
* PI_4     - pi/4
* _1_PI    - 1/pi
* _2_PI    - 2/pi
* _2_SQRTPI- 2/sqrt(pi)
* SQRT2    - sqrt(2)
* SQRT1_2  - 1/sqrt(2)
*/

#define E         2.7182818f//A float equal to e.
#define LOG2E     1.4426950f//A float equal to log2(e).
#define LOG10E    0.4342944f//A float equal to log10(e).
#define LN2       0.6931471f//A float equal to ln(2).
#define LN10      2.3025851f//A float equal to ln(10).
#define PI        3.1415927f//A float equal to pi.
#define PI_2      1.5707963f//A float equal to pi/2.
#define PI_4      0.7853982f//A float equal to pi/4
#define _1_PI     0.3183099f//A float equal to 1/pi.
#define _2_PI     0.6366198f//A float equal to 2/pi.
#define _2_SQRTPI 1.1283792f//A float equal to 2/sqrt(pi).
#define SQRT2     1.4142136f//A float equal to sqrt(2).
#define SQRT1_2   0.7071068f//A float equal to 1/sqrt(2).

//\===========================================================================================
//\ Degrees To Radians
//\===========================================================================================

float degreesToRadians(const float a_c_fRadAngle);

//\===========================================================================================
//\ Reciprocal
//\===========================================================================================

float reciprocal(const float a_c_fScalar);

//\===========================================================================================
//\ Test Collision Functions
//\===========================================================================================

//\===========================================================================================
//\ Min Value
//\===========================================================================================

//\===========================================================================================
//\ Max Value
//\===========================================================================================

template <typename T>
inline T const& Max(T const& a, T const& b)
{
	return a < b ? b : a;
}

//\===========================================================================================
//\ Clamp 
//\===========================================================================================

//\===========================================================================================
//\ Lerp 
//\===========================================================================================

float lerp(float v0, float v1, float t);

//\===========================================================================================
//\ Quad Bezzier
//\===========================================================================================

//\===========================================================================================
//\ Slerp 
//\===========================================================================================

//\===========================================================================================
//\ Smoothstep
//\===========================================================================================

//\===========================================================================================
//\ Smootherstep
//\===========================================================================================

#endif
